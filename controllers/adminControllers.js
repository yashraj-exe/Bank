const dotenv=require("dotenv").config(),userModel=require("../models/userModel"),bcrypt=require("bcrypt"),jwt=require("jsonwebtoken"),randomize=require("randomatic"),Excel=require("exceljs"),path=require("path"),moment=require("moment"),mail=require("../services/emailService"),adminModel=require("../models/adminModel");var ObjectId=require("mongodb").ObjectId;class adminControllers{static adminLogin=async(d,a)=>{let{email:c,password:e}=d.body;console.log(d.body);let b=await adminModel.findOne({email:c});if(console.log(b),c&&e){if(b){if(c===b.email&&e===b.password){let f=await bcrypt.genSalt(10),g=await bcrypt.hash(`${moment(new Date).format("DD-MM-YYYY").toString()}`,f),h=jwt.sign({admin:g},process.env.JWT_SECRET_KEY,{expiresIn:"1d"}),i={data:{token:h},status:"SUCCESS",message:"Login Success",role:"ADMIN",name:"Aastha"};a.send(i)}else a.send({message:"Invalid Credentials",status:"FAILED"})}else a.send({message:"Unable you find Admin"})}else a.send({message:"All fields are Required",status:"FAILED"})};static registerClient=async(e,b)=>{let{user:d,email:a,phone:f,address:g}=e.body,h=await userModel.findOne({email:a});if(console.log(e.valid),h)b.send({status:"Failed",message:"Email already Registered"});else if(d&&a&&f&&g){if(await userModel.findOne({email:a}))b.send({status:"FAILED",message:"Phone number allready exist"});else try{let c=randomize("0A",5);console.log(c);let i=await bcrypt.genSalt(10),j=await bcrypt.hash(c,i),k=new userModel({username:d,email:a,password:j,accountNumber:randomize("0",10),address:g,phone:f,tempPass:c});await k.save(),mail({from:"aasthajadhav22@gmail.com",to:a,subject:"Login Credentials",txt:"",html:`<h3>Hello,${d} this is your login credentials email : ${a} password : ${c}`}),b.send({status:"SUCCESS",message:"Client Register Successfully",password:c})}catch(l){b.send({status:"FAILED",message:"Unable to register client ",error:l.message})}}else b.send({status:"FAILED",message:"All fields are required"})};static deleteClient=async(c,a)=>{try{let b=c.params.accountNumber,d=await userModel.findOne({accountNumber:b});d?(await userModel.deleteOne({accountNumber:b}),a.status(200).send({message:"Delete success",status:"SUCCESS"})):a.send({message:"Account number is not valid",status:"404"})}catch(e){a.send("Error in deleting account, something went wrong")}};static freezAccount=async(b,a)=>{let{accountNumber:c}=b.body;console.log("freezAccount calling ",b.body);try{let d=await userModel.findOne({accountNumber:c});d?!0===d.isFreez?a.send({message:"Account Allready Freeze",status:"FAILED"}):(await userModel.updateOne({accountNumber:c},{$set:{isFreez:!0}}),a.send({message:"Account Freeze successfully",status:"SUCCESS"})):a.send({message:"Account number is not valid",status:"FAILED"})}catch(e){a.send({message:"Error in Freezeing account, something went wrong",status:"FAILED"})}};static unfreezAccount=async(d,a)=>{let{accountNumber:b}=d.body;console.log("Unfreez calls");try{let c=await userModel.findOne({accountNumber:b});c?!1===c.isFreez?a.send({message:"Account Allready unFreeze",status:"FAILED"}):(await userModel.updateOne({accountNumber:b},{$set:{isFreez:!1}}),a.send({message:"Account unFreeze successfully",status:"SUCCESS"})):a.send({message:"Account number is not valid",status:"FAILED"})}catch(e){a.send({message:"Error in UnFreezeing account, something went wrong",status:"FAILED"})}};static getAllClients=async(b,a)=>{if(b.valid)try{let c=await userModel.find().select("-password -lastTransaction -_id -__v -filePath -tempPass -checkBookDetails");a.send({message:"Succssfully Fetch data",status:"SUCCESS",data:c})}catch(d){a.status(500).send({message:"Error in fetching clients details, something went wrong",status:"SUCCESS"})}else a.send({message:"Our server is on Maintening period plz try again after some time",status:"FAILED"})};static getClientExcel=async(u,e)=>{try{let d=await userModel.find().sort("date"),f=new Excel.Workbook;try{let a=f.addWorksheet("sheet1");a.getRow(1).getCell(1).value="Sr.No",a.getRow(1).getCell(2).value="JOINING DATE",a.getRow(1).getCell(3).value="USER NAME",a.getRow(1).getCell(4).value="EMAIL",a.getRow(1).getCell(5).value="PHONE",a.getRow(1).getCell(6).value="ADDRESS",a.getRow(1).getCell(7).value="TOTAL TRANSACTION",a.getRow(1).getCell(8).value="is FREEZE",a.getRow(1).getCell(9).value="BALANCE";let i=a.getColumn(2),j=a.getColumn(3),k=a.getColumn(4),l=a.getColumn(5),m=a.getColumn(6),n=a.getColumn(7),o=a.getColumn(8),p=a.getColumn(9),b=0;i.width=15,j.width=25,k.width=40,l.width=20,m.width=25,n.width=19,o.width=20,p.width=15;for(let c=0;c<d.length;c++){b+=1;let q=moment(d[c].join).format("DD-MM-YYYY"),r=JSON.stringify(d[c].isFreez);a.getRow(b+1).getCell(1).value=b,a.getRow(b+1).getCell(2).value=q||"",a.getRow(b+1).getCell(3).value=d[c].username||"",a.getRow(b+1).getCell(4).value=d[c].email||"",a.getRow(b+1).getCell(5).value=Number(d[c].phone)||"",a.getRow(b+1).getCell(6).value=d[c].address||"",a.getRow(b+1).getCell(7).value=Number(d[c].lastTransaction.length)||0,a.getRow(b+1).getCell(8).value=r||"",a.getRow(b+1).getCell(9).value=Number(d[c].balance)||0}let g=`Clients_data_${moment(new Date).format("DD-MM-YYYY")}.xls`,s=path.join(process.cwd(),"Excel","Admin","All_Clients",g);try{await f.xlsx.writeFile(s);let h=`/Excel/Admin/All_Clients/${g}`;console.log(h),await adminModel.updateOne({"_id":"630870c6174694c32c86aa57"},{$set:{allClientFilePath:h}}),e.send({message:"Successfully Download Excel",status:"SUCCESS",link:"admin/client/download/630870c6174694c32c86aa57"})}catch(v){e.send("Error in saving excel file")}}catch(t){console.log(t),e.send("Error in making excel")}}catch(w){e.send("Error initia server error")}};static getSpecificClientTransactionExcel=async(i,e)=>{try{let j=new Date,f=await userModel.findOne({accountNumber:i.body.account});if(f)try{let d=f.lastTransaction,g=new Excel.Workbook,a=g.addWorksheet("Sheet1");a.getRow(1).getCell(1).value="Sr.No",a.getRow(1).getCell(2).value="Date",a.getRow(1).getCell(3).value="Type",a.getRow(1).getCell(4).value="Debit",a.getRow(1).getCell(5).value="Credit",a.getRow(1).getCell(6).value="Balance",a.getRow(1).getCell(7).value="To";let b=0,k=a.getColumn(2),l=a.getColumn(3),m=a.getColumn(4),n=a.getColumn(5),o=a.getColumn(6),p=a.getColumn(7);k.width=30,l.width=20,n.width=15,o.width=15,p.width=15,m.width=15;for(let c=0;c<d.length;c++)b+=1,a.getRow(b+1).getCell(1).value=b,a.getRow(b+1).getCell(2).value=d[c].date,a.getRow(b+1).getCell(3).value=d[c].type,a.getRow(b+1).getCell(4).value=Number(d[c].debit),a.getRow(b+1).getCell(5).value=Number(d[c].credit),a.getRow(b+1).getCell(6).value=Number(d[c].balance),a.getRow(b+1).getCell(7).value=d[c].to;let h=`${f.username}_${moment(j).format("DD-MM-YYYY")}.xls`,q=path.join(process.cwd(),"Excel","Admin","Specific_Client_Transaction",h);try{await g.xlsx.writeFile(q),await adminModel.updateOne({"_id":"630870c6174694c32c86aa57"},{$set:{specificClientFilePath:`/Excel/Admin/Specific_Client_Transaction/${h}`}}),e.send({message:"Successfully Generate Excel",status:"SUCCESS",link:"admin/client/specificClient/630870c6174694c32c86aa57"})}catch(r){console.log(r),e.send("Error in saving XLSX")}}catch(s){console.log(s),e.send("Error in writing Excel")}else e.send("Error User not found")}catch(t){e.send("Error cannot Create excel")}};static downloadSpecific=async(e,a)=>{try{console.log("In specific");let b=await adminModel.find();if(console.log("USER DOWNLOAD :- ",b),b){let c=`${process.cwd()}${b[0].specificClientFilePath}`;console.log("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$",c),a.download(c,b=>{if(console.log("Im erroe %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",b),b)throw a.send({message:"Unable to download file",status:"FAILED"})})}else a.send({message:"Admin records not found",status:"FAILED"})}catch(d){console.log(d),a.send({message:"Something went wrong",status:"FAILED"})}};static download=async(e,b)=>{try{let a=await adminModel.find();if(console.log(a),a){console.log("USER DOWNLOAD :- ",a);let c=`${process.cwd()}${a[0].allClientFilePath}`;b.download(c,a=>{if(a)throw b.send({message:"Unable to download file",status:"FAILED"})})}else b.send({message:"Admin records not found",status:"FAILED"})}catch(d){console.log(d),b.send({message:"Something went wrong",status:"FAILED"})}};static crossCheck=async(c,a)=>{try{let b=await userModel.findOne({accountNumber:c.params.accountNumber},{username:1,phone:1,email:1,"_id":0});b?a.send({status:"SUCCESS",data:b}):a.status(400).send({message:"Not a valid account Number",status:"FAILED"})}catch(d){a.send({message:"Something went wrong!",status:"FAILED"})}}}module.exports=adminControllers